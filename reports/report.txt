#Deployment Report
This file was generated during the github actions workflow run.

## Terraform Plan Output
[command]/home/runner/work/_temp/0483fa33-6607-43c4-85cf-37259932b510/terraform-bin plan -no-color -lock=false
module.lambda_retrieve.aws_iam_policy.lambda_policy: Refreshing state... [id=arn:aws:iam::945839052546:policy/user-data-retrieve-policy20250421112906732800000004]
module.lambda_retrieve.aws_iam_role_policy_attachment.lambda_policy_attachment: Refreshing state... [id=user-data-retrieve-role20250421112906614500000001-20250421112907303600000006]
module.dynamodb_table.aws_dynamodb_table.main: Refreshing state... [id=UserDataTable]
module.lambda_retrieve.aws_iam_role.lambda_role: Refreshing state... [id=user-data-retrieve-role20250421112906614500000001]
module.lambda_add.aws_iam_role.lambda_role: Refreshing state... [id=user-data-add-role20250421112906616100000002]
module.lambda_add.aws_iam_role_policy_attachment.lambda_policy_attachment: Refreshing state... [id=user-data-add-role20250421112906616100000002-20250421112907294200000005]
module.lambda_add.aws_iam_policy.lambda_policy: Refreshing state... [id=arn:aws:iam::945839052546:policy/user-data-add-policy20250421112906674700000003]

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  + create
  - destroy

Terraform will perform the following actions:

  # aws_security_group.aurora_sg will be created
  + resource "aws_security_group" "aurora_sg" {
      + arn                    = (known after apply)
      + description            = "Security group for AuroraDB access"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
                # (1 unchanged attribute hidden)
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "148.64.4.52/32",
                ]
              + description      = "Allow MySQL/PostgreSQL access from specific IP"
              + from_port        = 3306
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 3306
            },
          + {
              + cidr_blocks      = [
                  + "172.31.32.0/20",
                ]
              + description      = "Allow traffic within the VPC (adjust as needed)"
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 65535
            },
        ]
      + name                   = "bayer-aurora-project-aurora-sg"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Name" = "bayer-aurora-project-aurora-sg"
        }
      + tags_all               = {
          + "Name" = "bayer-aurora-project-aurora-sg"
        }
      + vpc_id                 = "vpc-0feb09ec941ba1ac9"
    }

  # random_password.master will be created
  + resource "random_password" "master" {
      + bcrypt_hash      = (sensitive value)
      + id               = (known after apply)
      + length           = 16
      + lower            = true
      + min_lower        = 0
      + min_numeric      = 0
      + min_special      = 0
      + min_upper        = 0
      + number           = true
      + numeric          = true
      + override_special = "!#$%&*()-_=+[]{}?:."
      + result           = (sensitive value)
      + special          = true
      + upper            = true
    }

  # module.aurora_db.aws_db_subnet_group.aurora_subnet_group will be created
  + resource "aws_db_subnet_group" "aurora_subnet_group" {
      + arn                     = (known after apply)
      + description             = "Managed by Terraform"
      + id                      = (known after apply)
      + name                    = "bayer-aurora-project-aurora-subnet-group"
      + name_prefix             = (known after apply)
      + subnet_ids              = [
          + "subnet-037ac2f49cfc721e4",
          + "subnet-0d2213f8312c329bc",
        ]
      + supported_network_types = (known after apply)
      + tags_all                = (known after apply)
      + vpc_id                  = (known after apply)
    }

  # module.aurora_db.aws_rds_cluster.aurora1 will be created
  + resource "aws_rds_cluster" "aurora1" {
      + allocated_storage                     = (known after apply)
      + apply_immediately                     = (known after apply)
      + arn                                   = (known after apply)
      + availability_zones                    = (known after apply)
      + backup_retention_period               = (known after apply)
      + ca_certificate_identifier             = (known after apply)
      + ca_certificate_valid_till             = (known after apply)
      + cluster_identifier                    = "bayer-aurora-project-aurora"
      + cluster_identifier_prefix             = (known after apply)
      + cluster_members                       = (known after apply)
      + cluster_resource_id                   = (known after apply)
      + cluster_scalability_type              = (known after apply)
      + copy_tags_to_snapshot                 = false
      + database_insights_mode                = (known after apply)
      + database_name                         = "bayerdb"
      + db_cluster_parameter_group_name       = (known after apply)
      + db_subnet_group_name                  = "bayer-aurora-project-aurora-subnet-group"
      + db_system_id                          = (known after apply)
      + delete_automated_backups              = true
      + deletion_protection                   = true
      + enable_global_write_forwarding        = false
      + enable_http_endpoint                  = false
      + enable_local_write_forwarding         = false
      + endpoint                              = (known after apply)
      + engine                                = "aurora-mysql"
      + engine_lifecycle_support              = (known after apply)
      + engine_mode                           = "provisioned"
      + engine_version                        = "5.7.mysql_aurora.2.12.5"
      + engine_version_actual                 = (known after apply)
      + final_snapshot_identifier             = (known after apply)
      + hosted_zone_id                        = (known after apply)
      + iam_roles                             = (known after apply)
      + id                                    = (known after apply)
      + kms_key_id                            = (known after apply)
      + master_password                       = (sensitive value)
      + master_password_wo                    = (write-only attribute)
      + master_user_secret                    = (known after apply)
      + master_user_secret_kms_key_id         = (known after apply)
      + master_username                       = "admin"
      + monitoring_interval                   = (known after apply)
      + monitoring_role_arn                   = (known after apply)
      + network_type                          = (known after apply)
      + performance_insights_kms_key_id       = (known after apply)
      + performance_insights_retention_period = (known after apply)
      + port                                  = (known after apply)
      + preferred_backup_window               = (known after apply)
      + preferred_maintenance_window          = (known after apply)
      + reader_endpoint                       = (known after apply)
      + skip_final_snapshot                   = false
      + storage_encrypted                     = (known after apply)
      + storage_type                          = (known after apply)
      + tags_all                              = (known after apply)
      + vpc_security_group_ids                = (known after apply)
    }

  # module.aurora_db.aws_rds_cluster_instance.aurora_instance[0] will be created
  + resource "aws_rds_cluster_instance" "aurora_instance" {
      + apply_immediately                     = (known after apply)
      + arn                                   = (known after apply)
      + auto_minor_version_upgrade            = true
      + availability_zone                     = (known after apply)
      + ca_cert_identifier                    = (known after apply)
      + cluster_identifier                    = (known after apply)
      + copy_tags_to_snapshot                 = false
      + db_parameter_group_name               = (known after apply)
      + db_subnet_group_name                  = (known after apply)
      + dbi_resource_id                       = (known after apply)
      + endpoint                              = (known after apply)
      + engine                                = "aurora-mysql"
      + engine_version                        = "5.7.mysql_aurora.2.12.5"
      + engine_version_actual                 = (known after apply)
      + force_destroy                         = false
      + id                                    = (known after apply)
      + identifier                            = "bayer-aurora-project-aurora-1"
      + identifier_prefix                     = (known after apply)
      + instance_class                        = "db.t3.medium"
      + kms_key_id                            = (known after apply)
      + monitoring_interval                   = 0
      + monitoring_role_arn                   = (known after apply)
      + network_type                          = (known after apply)
      + performance_insights_enabled          = (known after apply)
      + performance_insights_kms_key_id       = (known after apply)
      + performance_insights_retention_period = (known after apply)
      + port                                  = (known after apply)
      + preferred_backup_window               = (known after apply)
      + preferred_maintenance_window          = (known after apply)
      + promotion_tier                        = 0
      + publicly_accessible                   = (known after apply)
      + storage_encrypted                     = (known after apply)
      + tags_all                              = (known after apply)
      + writer                                = (known after apply)
    }

  # module.aurora_db.aws_rds_cluster_instance.aurora_instance[1] will be created
  + resource "aws_rds_cluster_instance" "aurora_instance" {
      + apply_immediately                     = (known after apply)
      + arn                                   = (known after apply)
      + auto_minor_version_upgrade            = true
      + availability_zone                     = (known after apply)
      + ca_cert_identifier                    = (known after apply)
      + cluster_identifier                    = (known after apply)
      + copy_tags_to_snapshot                 = false
      + db_parameter_group_name               = (known after apply)
      + db_subnet_group_name                  = (known after apply)
      + dbi_resource_id                       = (known after apply)
      + endpoint                              = (known after apply)
      + engine                                = "aurora-mysql"
      + engine_version                        = "5.7.mysql_aurora.2.12.5"
      + engine_version_actual                 = (known after apply)
      + force_destroy                         = false
      + id                                    = (known after apply)
      + identifier                            = "bayer-aurora-project-aurora-2"
      + identifier_prefix                     = (known after apply)
      + instance_class                        = "db.t3.medium"
      + kms_key_id                            = (known after apply)
      + monitoring_interval                   = 0
      + monitoring_role_arn                   = (known after apply)
      + network_type                          = (known after apply)
      + performance_insights_enabled          = (known after apply)
      + performance_insights_kms_key_id       = (known after apply)
      + performance_insights_retention_period = (known after apply)
      + port                                  = (known after apply)
      + preferred_backup_window               = (known after apply)
      + preferred_maintenance_window          = (known after apply)
      + promotion_tier                        = 0
      + publicly_accessible                   = (known after apply)
      + storage_encrypted                     = (known after apply)
      + tags_all                              = (known after apply)
      + writer                                = (known after apply)
    }

  # module.aurora_db.aws_secretsmanager_secret.aurora_credentials will be created
  + resource "aws_secretsmanager_secret" "aurora_credentials" {
      + arn                            = (known after apply)
      + force_overwrite_replica_secret = false
      + id                             = (known after apply)
      + name                           = "bayer-aurora-credentials-1"
      + name_prefix                    = (known after apply)
      + policy                         = (known after apply)
      + recovery_window_in_days        = 30
      + tags_all                       = (known after apply)

      + replica (known after apply)
    }

  # module.aurora_db.aws_secretsmanager_secret_version.aurora_credentials_version will be created
  + resource "aws_secretsmanager_secret_version" "aurora_credentials_version" {
      + arn                  = (known after apply)
      + has_secret_string_wo = (known after apply)
      + id                   = (known after apply)
      + secret_id            = (known after apply)
      + secret_string        = (sensitive value)
      + secret_string_wo     = (write-only attribute)
      + version_id           = (known after apply)
      + version_stages       = (known after apply)
    }

  # module.dynamodb_table.aws_dynamodb_table.main will be destroyed
  # (because aws_dynamodb_table.main is not in configuration)
  - resource "aws_dynamodb_table" "main" {
      - arn                         = "arn:aws:dynamodb:us-east-1:945839052546:table/UserDataTable" -> null
      - billing_mode                = "PAY_PER_REQUEST" -> null
      - deletion_protection_enabled = false -> null
      - hash_key                    = "UserID" -> null
      - id                          = "UserDataTable" -> null
      - name                        = "UserDataTable" -> null
      - read_capacity               = 0 -> null
      - stream_enabled              = false -> null
      - table_class                 = "STANDARD" -> null
      - tags                        = {
          - "Environment" = "dev"
        } -> null
      - tags_all                    = {
          - "Environment" = "dev"
        } -> null
      - write_capacity              = 0 -> null
        # (3 unchanged attributes hidden)

      - attribute {
          - name = "UserID" -> null
          - type = "S" -> null
        }

      - point_in_time_recovery {
          - enabled = false -> null
        }

      - ttl {
          - enabled        = false -> null
            # (1 unchanged attribute hidden)
        }
    }

  # module.lambda_add.aws_iam_policy.lambda_policy will be destroyed
  # (because aws_iam_policy.lambda_policy is not in configuration)
  - resource "aws_iam_policy" "lambda_policy" {
      - arn              = "arn:aws:iam::945839052546:policy/user-data-add-policy20250421112906674700000003" -> null
      - attachment_count = 0 -> null
      - id               = "arn:aws:iam::945839052546:policy/user-data-add-policy20250421112906674700000003" -> null
      - name             = "user-data-add-policy20250421112906674700000003" -> null
      - name_prefix      = "user-data-add-policy" -> null
      - path             = "/" -> null
      - policy           = jsonencode(
            {
              - Statement = [
                  - {
                      - Action   = [
                          - "logs:CreateLogGroup",
                          - "logs:CreateLogStream",
                          - "logs:PutLogEvents",
                          - "dynamodb:PutItem",
                          - "dynamodb:GetItem",
                        ]
                      - Effect   = "Allow"
                      - Resource = [
                          - "arn:aws:logs:us-east-1:945839052546:log-group:/aws/lambda/user-data-add:*",
                          - "arn:aws:dynamodb:us-east-1:945839052546:table/UserDataTable",
                        ]
                    },
                ]
              - Version   = "2012-10-17"
            }
        ) -> null
      - policy_id        = "ANPA5YODGS4BIYIVR55O3" -> null
      - tags_all         = {} -> null
        # (1 unchanged attribute hidden)
    }

  # module.lambda_add.aws_iam_role.lambda_role will be destroyed
  # (because aws_iam_role.lambda_role is not in configuration)
  - resource "aws_iam_role" "lambda_role" {
      - arn                   = "arn:aws:iam::945839052546:role/user-data-add-role20250421112906616100000002" -> null
      - assume_role_policy    = jsonencode(
            {
              - Statement = [
                  - {
                      - Action    = "sts:AssumeRole"
                      - Effect    = "Allow"
                      - Principal = {
                          - Service = "lambda.amazonaws.com"
                        }
                    },
                ]
              - Version   = "2012-10-17"
            }
        ) -> null
      - create_date           = "2025-04-21T11:29:06Z" -> null
      - force_detach_policies = false -> null
      - id                    = "user-data-add-role20250421112906616100000002" -> null
      - managed_policy_arns   = [] -> null
      - max_session_duration  = 3600 -> null
      - name                  = "user-data-add-role20250421112906616100000002" -> null
      - name_prefix           = "user-data-add-role" -> null
      - path                  = "/" -> null
      - tags_all              = {} -> null
      - unique_id             = "AROA5YODGS4BBFW4FJE7V" -> null
        # (2 unchanged attributes hidden)
    }

  # module.lambda_add.aws_iam_role_policy_attachment.lambda_policy_attachment will be destroyed
  # (because aws_iam_role_policy_attachment.lambda_policy_attachment is not in configuration)
  - resource "aws_iam_role_policy_attachment" "lambda_policy_attachment" {
      - id         = "user-data-add-role20250421112906616100000002-20250421112907294200000005" -> null
      - policy_arn = "arn:aws:iam::945839052546:policy/user-data-add-policy20250421112906674700000003" -> null
      - role       = "user-data-add-role20250421112906616100000002" -> null
    }

  # module.lambda_retrieve.aws_iam_policy.lambda_policy will be destroyed
  # (because aws_iam_policy.lambda_policy is not in configuration)
  - resource "aws_iam_policy" "lambda_policy" {
      - arn              = "arn:aws:iam::945839052546:policy/user-data-retrieve-policy20250421112906732800000004" -> null
      - attachment_count = 0 -> null
      - id               = "arn:aws:iam::945839052546:policy/user-data-retrieve-policy20250421112906732800000004" -> null
      - name             = "user-data-retrieve-policy20250421112906732800000004" -> null
      - name_prefix      = "user-data-retrieve-policy" -> null
      - path             = "/" -> null
      - policy           = jsonencode(
            {
              - Statement = [
                  - {
                      - Action   = [
                          - "logs:CreateLogGroup",
                          - "logs:CreateLogStream",
                          - "logs:PutLogEvents",
                          - "dynamodb:PutItem",
                          - "dynamodb:GetItem",
                        ]
                      - Effect   = "Allow"
                      - Resource = [
                          - "arn:aws:logs:us-east-1:945839052546:log-group:/aws/lambda/user-data-retrieve:*",
                          - "arn:aws:dynamodb:us-east-1:945839052546:table/UserDataTable",
                        ]
                    },
                ]
              - Version   = "2012-10-17"
            }
        ) -> null
      - policy_id        = "ANPA5YODGS4BGGXEXW3WM" -> null
      - tags_all         = {} -> null
        # (1 unchanged attribute hidden)
    }

  # module.lambda_retrieve.aws_iam_role.lambda_role will be destroyed
  # (because aws_iam_role.lambda_role is not in configuration)
  - resource "aws_iam_role" "lambda_role" {
      - arn                   = "arn:aws:iam::945839052546:role/user-data-retrieve-role20250421112906614500000001" -> null
      - assume_role_policy    = jsonencode(
            {
              - Statement = [
                  - {
                      - Action    = "sts:AssumeRole"
                      - Effect    = "Allow"
                      - Principal = {
                          - Service = "lambda.amazonaws.com"
                        }
                    },
                ]
              - Version   = "2012-10-17"
            }
        ) -> null
      - create_date           = "2025-04-21T11:29:06Z" -> null
      - force_detach_policies = false -> null
      - id                    = "user-data-retrieve-role20250421112906614500000001" -> null
      - managed_policy_arns   = [] -> null
      - max_session_duration  = 3600 -> null
      - name                  = "user-data-retrieve-role20250421112906614500000001" -> null
      - name_prefix           = "user-data-retrieve-role" -> null
      - path                  = "/" -> null
      - tags_all              = {} -> null
      - unique_id             = "AROA5YODGS4BELN4GYDAI" -> null
        # (2 unchanged attributes hidden)
    }

  # module.lambda_retrieve.aws_iam_role_policy_attachment.lambda_policy_attachment will be destroyed
  # (because aws_iam_role_policy_attachment.lambda_policy_attachment is not in configuration)
  - resource "aws_iam_role_policy_attachment" "lambda_policy_attachment" {
      - id         = "user-data-retrieve-role20250421112906614500000001-20250421112907303600000006" -> null
      - policy_arn = "arn:aws:iam::945839052546:policy/user-data-retrieve-policy20250421112906732800000004" -> null
      - role       = "user-data-retrieve-role20250421112906614500000001" -> null
    }

Plan: 8 to add, 0 to change, 7 to destroy.

Changes to Outputs:
  + aurora_endpoint                 = (known after apply)
  + aurora_reader_endpoint          = (known after apply)
  + database_credentials_secret_arn = (known after apply)
  + database_security_group_id      = (known after apply)
  - dynamodb_table_arn              = "arn:aws:dynamodb:us-east-1:945839052546:table/UserDataTable" -> null

─────────────────────────────────────────────────────────────────────────────

Note: You didn't use the -out option to save this plan, so Terraform can't
guarantee to take exactly these actions if you run "terraform apply" now.
::debug::Terraform exited with code 0.
::debug::stdout: module.lambda_retrieve.aws_iam_policy.lambda_policy: Refreshing state... [id=arn:aws:iam::945839052546:policy/user-data-retrieve-policy20250421112906732800000004]%0Amodule.lambda_retrieve.aws_iam_role_policy_attachment.lambda_policy_attachment: Refreshing state... [id=user-data-retrieve-role20250421112906614500000001-20250421112907303600000006]%0Amodule.dynamodb_table.aws_dynamodb_table.main: Refreshing state... [id=UserDataTable]%0Amodule.lambda_retrieve.aws_iam_role.lambda_role: Refreshing state... [id=user-data-retrieve-role20250421112906614500000001]%0Amodule.lambda_add.aws_iam_role.lambda_role: Refreshing state... [id=user-data-add-role20250421112906616100000002]%0Amodule.lambda_add.aws_iam_role_policy_attachment.lambda_policy_attachment: Refreshing state... [id=user-data-add-role20250421112906616100000002-20250421112907294200000005]%0Amodule.lambda_add.aws_iam_policy.lambda_policy: Refreshing state... [id=arn:aws:iam::945839052546:policy/user-data-add-policy20250421112906674700000003]%0A%0ATerraform used the selected providers to generate the following execution%0Aplan. Resource actions are indicated with the following symbols:%0A  + create%0A  - destroy%0A%0ATerraform will perform the following actions:%0A%0A  # aws_security_group.aurora_sg will be created%0A  + resource "aws_security_group" "aurora_sg" {%0A      + arn                    = (known after apply)%0A      + description            = "Security group for AuroraDB access"%0A      + egress                 = [%0A          + {%0A              + cidr_blocks      = [%0A                  + "0.0.0.0/0",%0A                ]%0A              + from_port        = 0%0A              + ipv6_cidr_blocks = []%0A              + prefix_list_ids  = []%0A              + protocol         = "-1"%0A              + security_groups  = []%0A              + self             = false%0A              + to_port          = 0%0A                # (1 unchanged attribute hidden)%0A            },%0A        ]%0A      + id                     = (known after apply)%0A      + ingress                = [%0A          + {%0A              + cidr_blocks      = [%0A                  + "148.64.4.52/32",%0A                ]%0A              + description      = "Allow MySQL/PostgreSQL access from specific IP"%0A              + from_port        = 3306%0A              + ipv6_cidr_blocks = []%0A              + prefix_list_ids  = []%0A              + protocol         = "tcp"%0A              + security_groups  = []%0A              + self             = false%0A              + to_port          = 3306%0A            },%0A          + {%0A              + cidr_blocks      = [%0A                  + "172.31.32.0/20",%0A                ]%0A              + description      = "Allow traffic within the VPC (adjust as needed)"%0A              + from_port        = 0%0A              + ipv6_cidr_blocks = []%0A              + prefix_list_ids  = []%0A              + protocol         = "tcp"%0A              + security_groups  = []%0A              + self             = false%0A              + to_port          = 65535%0A            },%0A        ]%0A      + name                   = "bayer-aurora-project-aurora-sg"%0A      + name_prefix            = (known after apply)%0A      + owner_id               = (known after apply)%0A      + revoke_rules_on_delete = false%0A      + tags                   = {%0A          + "Name" = "bayer-aurora-project-aurora-sg"%0A        }%0A      + tags_all               = {%0A          + "Name" = "bayer-aurora-project-aurora-sg"%0A        }%0A      + vpc_id                 = "vpc-0feb09ec941ba1ac9"%0A    }%0A%0A  # random_password.master will be created%0A  + resource "random_password" "master" {%0A      + bcrypt_hash      = (sensitive value)%0A      + id               = (known after apply)%0A      + length           = 16%0A      + lower            = true%0A      + min_lower        = 0%0A      + min_numeric      = 0%0A      + min_special      = 0%0A      + min_upper        = 0%0A      + number           = true%0A      + numeric          = true%0A      + override_special = "!#$%25&*()-_=+[]{}?:."%0A      + result           = (sensitive value)%0A      + special          = true%0A      + upper            = true%0A    }%0A%0A  # module.aurora_db.aws_db_subnet_group.aurora_subnet_group will be created%0A  + resource "aws_db_subnet_group" "aurora_subnet_group" {%0A      + arn                     = (known after apply)%0A      + description             = "Managed by Terraform"%0A      + id                      = (known after apply)%0A      + name                    = "bayer-aurora-project-aurora-subnet-group"%0A      + name_prefix             = (known after apply)%0A      + subnet_ids              = [%0A          + "subnet-037ac2f49cfc721e4",%0A          + "subnet-0d2213f8312c329bc",%0A        ]%0A      + supported_network_types = (known after apply)%0A      + tags_all                = (known after apply)%0A      + vpc_id                  = (known after apply)%0A    }%0A%0A  # module.aurora_db.aws_rds_cluster.aurora1 will be created%0A  + resource "aws_rds_cluster" "aurora1" {%0A      + allocated_storage                     = (known after apply)%0A      + apply_immediately                     = (known after apply)%0A      + arn                                   = (known after apply)%0A      + availability_zones                    = (known after apply)%0A      + backup_retention_period               = (known after apply)%0A      + ca_certificate_identifier             = (known after apply)%0A      + ca_certificate_valid_till             = (known after apply)%0A      + cluster_identifier                    = "bayer-aurora-project-aurora"%0A      + cluster_identifier_prefix             = (known after apply)%0A      + cluster_members                       = (known after apply)%0A      + cluster_resource_id                   = (known after apply)%0A      + cluster_scalability_type              = (known after apply)%0A      + copy_tags_to_snapshot                 = false%0A      + database_insights_mode                = (known after apply)%0A      + database_name                         = "bayerdb"%0A      + db_cluster_parameter_group_name       = (known after apply)%0A      + db_subnet_group_name                  = "bayer-aurora-project-aurora-subnet-group"%0A      + db_system_id                          = (known after apply)%0A      + delete_automated_backups              = true%0A      + deletion_protection                   = true%0A      + enable_global_write_forwarding        = false%0A      + enable_http_endpoint                  = false%0A      + enable_local_write_forwarding         = false%0A      + endpoint                              = (known after apply)%0A      + engine                                = "aurora-mysql"%0A      + engine_lifecycle_support              = (known after apply)%0A      + engine_mode                           = "provisioned"%0A      + engine_version                        = "5.7.mysql_aurora.2.12.5"%0A      + engine_version_actual                 = (known after apply)%0A      + final_snapshot_identifier             = (known after apply)%0A      + hosted_zone_id                        = (known after apply)%0A      + iam_roles                             = (known after apply)%0A      + id                                    = (known after apply)%0A      + kms_key_id                            = (known after apply)%0A      + master_password                       = (sensitive value)%0A      + master_password_wo                    = (write-only attribute)%0A      + master_user_secret                    = (known after apply)%0A      + master_user_secret_kms_key_id         = (known after apply)%0A      + master_username                       = "admin"%0A      + monitoring_interval                   = (known after apply)%0A      + monitoring_role_arn                   = (known after apply)%0A      + network_type                          = (known after apply)%0A      + performance_insights_kms_key_id       = (known after apply)%0A      + performance_insights_retention_period = (known after apply)%0A      + port                                  = (known after apply)%0A      + preferred_backup_window               = (known after apply)%0A      + preferred_maintenance_window          = (known after apply)%0A      + reader_endpoint                       = (known after apply)%0A      + skip_final_snapshot                   = false%0A      + storage_encrypted                     = (known after apply)%0A      + storage_type                          = (known after apply)%0A      + tags_all                              = (known after apply)%0A      + vpc_security_group_ids                = (known after apply)%0A    }%0A%0A  # module.aurora_db.aws_rds_cluster_instance.aurora_instance[0] will be created%0A  + resource "aws_rds_cluster_instance" "aurora_instance" {%0A      + apply_immediately                     = (known after apply)%0A      + arn                                   = (known after apply)%0A      + auto_minor_version_upgrade            = true%0A      + availability_zone                     = (known after apply)%0A      + ca_cert_identifier                    = (known after apply)%0A      + cluster_identifier                    = (known after apply)%0A      + copy_tags_to_snapshot                 = false%0A      + db_parameter_group_name               = (known after apply)%0A      + db_subnet_group_name                  = (known after apply)%0A      + dbi_resource_id                       = (known after apply)%0A      + endpoint                              = (known after apply)%0A      + engine                                = "aurora-mysql"%0A      + engine_version                        = "5.7.mysql_aurora.2.12.5"%0A      + engine_version_actual                 = (known after apply)%0A      + force_destroy                         = false%0A      + id                                    = (known after apply)%0A      + identifier                            = "bayer-aurora-project-aurora-1"%0A      + identifier_prefix                     = (known after apply)%0A      + instance_class                        = "db.t3.medium"%0A      + kms_key_id                            = (known after apply)%0A      + monitoring_interval                   = 0%0A      + monitoring_role_arn                   = (known after apply)%0A      + network_type                          = (known after apply)%0A      + performance_insights_enabled          = (known after apply)%0A      + performance_insights_kms_key_id       = (known after apply)%0A      + performance_insights_retention_period = (known after apply)%0A      + port                                  = (known after apply)%0A      + preferred_backup_window               = (known after apply)%0A      + preferred_maintenance_window          = (known after apply)%0A      + promotion_tier                        = 0%0A      + publicly_accessible                   = (known after apply)%0A      + storage_encrypted                     = (known after apply)%0A      + tags_all                              = (known after apply)%0A      + writer                                = (known after apply)%0A    }%0A%0A  # module.aurora_db.aws_rds_cluster_instance.aurora_instance[1] will be created%0A  + resource "aws_rds_cluster_instance" "aurora_instance" {%0A      + apply_immediately                     = (known after apply)%0A      + arn                                   = (known after apply)%0A      + auto_minor_version_upgrade            = true%0A      + availability_zone                     = (known after apply)%0A      + ca_cert_identifier                    = (known after apply)%0A      + cluster_identifier                    = (known after apply)%0A      + copy_tags_to_snapshot                 = false%0A      + db_parameter_group_name               = (known after apply)%0A      + db_subnet_group_name                  = (known after apply)%0A      + dbi_resource_id                       = (known after apply)%0A      + endpoint                              = (known after apply)%0A      + engine                                = "aurora-mysql"%0A      + engine_version                        = "5.7.mysql_aurora.2.12.5"%0A      + engine_version_actual                 = (known after apply)%0A      + force_destroy                         = false%0A      + id                                    = (known after apply)%0A      + identifier                            = "bayer-aurora-project-aurora-2"%0A      + identifier_prefix                     = (known after apply)%0A      + instance_class                        = "db.t3.medium"%0A      + kms_key_id                            = (known after apply)%0A      + monitoring_interval                   = 0%0A      + monitoring_role_arn                   = (known after apply)%0A      + network_type                          = (known after apply)%0A      + performance_insights_enabled          = (known after apply)%0A      + performance_insights_kms_key_id       = (known after apply)%0A      + performance_insights_retention_period = (known after apply)%0A      + port                                  = (known after apply)%0A      + preferred_backup_window               = (known after apply)%0A      + preferred_maintenance_window          = (known after apply)%0A      + promotion_tier                        = 0%0A      + publicly_accessible                   = (known after apply)%0A      + storage_encrypted                     = (known after apply)%0A      + tags_all                              = (known after apply)%0A      + writer                                = (known after apply)%0A    }%0A%0A  # module.aurora_db.aws_secretsmanager_secret.aurora_credentials will be created%0A  + resource "aws_secretsmanager_secret" "aurora_credentials" {%0A      + arn                            = (known after apply)%0A      + force_overwrite_replica_secret = false%0A      + id                             = (known after apply)%0A      + name                           = "bayer-aurora-credentials-1"%0A      + name_prefix                    = (known after apply)%0A      + policy                         = (known after apply)%0A      + recovery_window_in_days        = 30%0A      + tags_all                       = (known after apply)%0A%0A      + replica (known after apply)%0A    }%0A%0A  # module.aurora_db.aws_secretsmanager_secret_version.aurora_credentials_version will be created%0A  + resource "aws_secretsmanager_secret_version" "aurora_credentials_version" {%0A      + arn                  = (known after apply)%0A      + has_secret_string_wo = (known after apply)%0A      + id                   = (known after apply)%0A      + secret_id            = (known after apply)%0A      + secret_string        = (sensitive value)%0A      + secret_string_wo     = (write-only attribute)%0A      + version_id           = (known after apply)%0A      + version_stages       = (known after apply)%0A    }%0A%0A  # module.dynamodb_table.aws_dynamodb_table.main will be destroyed%0A  # (because aws_dynamodb_table.main is not in configuration)%0A  - resource "aws_dynamodb_table" "main" {%0A      - arn                         = "arn:aws:dynamodb:us-east-1:945839052546:table/UserDataTable" -> null%0A      - billing_mode                = "PAY_PER_REQUEST" -> null%0A      - deletion_protection_enabled = false -> null%0A      - hash_key                    = "UserID" -> null%0A      - id                          = "UserDataTable" -> null%0A      - name                        = "UserDataTable" -> null%0A      - read_capacity               = 0 -> null%0A      - stream_enabled              = false -> null%0A      - table_class                 = "STANDARD" -> null%0A      - tags                        = {%0A          - "Environment" = "dev"%0A        } -> null%0A      - tags_all                    = {%0A          - "Environment" = "dev"%0A        } -> null%0A      - write_capacity              = 0 -> null%0A        # (3 unchanged attributes hidden)%0A%0A      - attribute {%0A          - name = "UserID" -> null%0A          - type = "S" -> null%0A        }%0A%0A      - point_in_time_recovery {%0A          - enabled = false -> null%0A        }%0A%0A      - ttl {%0A          - enabled        = false -> null%0A            # (1 unchanged attribute hidden)%0A        }%0A    }%0A%0A  # module.lambda_add.aws_iam_policy.lambda_policy will be destroyed%0A  # (because aws_iam_policy.lambda_policy is not in configuration)%0A  - resource "aws_iam_policy" "lambda_policy" {%0A      - arn              = "arn:aws:iam::945839052546:policy/user-data-add-policy20250421112906674700000003" -> null%0A      - attachment_count = 0 -> null%0A      - id               = "arn:aws:iam::945839052546:policy/user-data-add-policy20250421112906674700000003" -> null%0A      - name             = "user-data-add-policy20250421112906674700000003" -> null%0A      - name_prefix      = "user-data-add-policy" -> null%0A      - path             = "/" -> null%0A      - policy           = jsonencode(%0A            {%0A              - Statement = [%0A                  - {%0A                      - Action   = [%0A                          - "logs:CreateLogGroup",%0A                          - "logs:CreateLogStream",%0A                          - "logs:PutLogEvents",%0A                          - "dynamodb:PutItem",%0A                          - "dynamodb:GetItem",%0A                        ]%0A                      - Effect   = "Allow"%0A                      - Resource = [%0A                          - "arn:aws:logs:us-east-1:945839052546:log-group:/aws/lambda/user-data-add:*",%0A                          - "arn:aws:dynamodb:us-east-1:945839052546:table/UserDataTable",%0A                        ]%0A                    },%0A                ]%0A              - Version   = "2012-10-17"%0A            }%0A        ) -> null%0A      - policy_id        = "ANPA5YODGS4BIYIVR55O3" -> null%0A      - tags_all         = {} -> null%0A        # (1 unchanged attribute hidden)%0A    }%0A%0A  # module.lambda_add.aws_iam_role.lambda_role will be destroyed%0A  # (because aws_iam_role.lambda_role is not in configuration)%0A  - resource "aws_iam_role" "lambda_role" {%0A      - arn                   = "arn:aws:iam::945839052546:role/user-data-add-role20250421112906616100000002" -> null%0A      - assume_role_policy    = jsonencode(%0A            {%0A              - Statement = [%0A                  - {%0A                      - Action    = "sts:AssumeRole"%0A                      - Effect    = "Allow"%0A                      - Principal = {%0A                          - Service = "lambda.amazonaws.com"%0A                        }%0A                    },%0A                ]%0A              - Version   = "2012-10-17"%0A            }%0A        ) -> null%0A      - create_date           = "2025-04-21T11:29:06Z" -> null%0A      - force_detach_policies = false -> null%0A      - id                    = "user-data-add-role20250421112906616100000002" -> null%0A      - managed_policy_arns   = [] -> null%0A      - max_session_duration  = 3600 -> null%0A      - name                  = "user-data-add-role20250421112906616100000002" -> null%0A      - name_prefix           = "user-data-add-role" -> null%0A      - path                  = "/" -> null%0A      - tags_all              = {} -> null%0A      - unique_id             = "AROA5YODGS4BBFW4FJE7V" -> null%0A        # (2 unchanged attributes hidden)%0A    }%0A%0A  # module.lambda_add.aws_iam_role_policy_attachment.lambda_policy_attachment will be destroyed%0A  # (because aws_iam_role_policy_attachment.lambda_policy_attachment is not in configuration)%0A  - resource "aws_iam_role_policy_attachment" "lambda_policy_attachment" {%0A      - id         = "user-data-add-role20250421112906616100000002-20250421112907294200000005" -> null%0A      - policy_arn = "arn:aws:iam::945839052546:policy/user-data-add-policy20250421112906674700000003" -> null%0A      - role       = "user-data-add-role20250421112906616100000002" -> null%0A    }%0A%0A  # module.lambda_retrieve.aws_iam_policy.lambda_policy will be destroyed%0A  # (because aws_iam_policy.lambda_policy is not in configuration)%0A  - resource "aws_iam_policy" "lambda_policy" {%0A      - arn              = "arn:aws:iam::945839052546:policy/user-data-retrieve-policy20250421112906732800000004" -> null%0A      - attachment_count = 0 -> null%0A      - id               = "arn:aws:iam::945839052546:policy/user-data-retrieve-policy20250421112906732800000004" -> null%0A      - name             = "user-data-retrieve-policy20250421112906732800000004" -> null%0A      - name_prefix      = "user-data-retrieve-policy" -> null%0A      - path             = "/" -> null%0A      - policy           = jsonencode(%0A            {%0A              - Statement = [%0A                  - {%0A                      - Action   = [%0A                          - "logs:CreateLogGroup",%0A                          - "logs:CreateLogStream",%0A                          - "logs:PutLogEvents",%0A                          - "dynamodb:PutItem",%0A                          - "dynamodb:GetItem",%0A                        ]%0A                      - Effect   = "Allow"%0A                      - Resource = [%0A                          - "arn:aws:logs:us-east-1:945839052546:log-group:/aws/lambda/user-data-retrieve:*",%0A                          - "arn:aws:dynamodb:us-east-1:945839052546:table/UserDataTable",%0A                        ]%0A                    },%0A                ]%0A              - Version   = "2012-10-17"%0A            }%0A        ) -> null%0A      - policy_id        = "ANPA5YODGS4BGGXEXW3WM" -> null%0A      - tags_all         = {} -> null%0A        # (1 unchanged attribute hidden)%0A    }%0A%0A  # module.lambda_retrieve.aws_iam_role.lambda_role will be destroyed%0A  # (because aws_iam_role.lambda_role is not in configuration)%0A  - resource "aws_iam_role" "lambda_role" {%0A      - arn                   = "arn:aws:iam::945839052546:role/user-data-retrieve-role20250421112906614500000001" -> null%0A      - assume_role_policy    = jsonencode(%0A            {%0A              - Statement = [%0A                  - {%0A                      - Action    = "sts:AssumeRole"%0A                      - Effect    = "Allow"%0A                      - Principal = {%0A                          - Service = "lambda.amazonaws.com"%0A                        }%0A                    },%0A                ]%0A              - Version   = "2012-10-17"%0A            }%0A        ) -> null%0A      - create_date           = "2025-04-21T11:29:06Z" -> null%0A      - force_detach_policies = false -> null%0A      - id                    = "user-data-retrieve-role20250421112906614500000001" -> null%0A      - managed_policy_arns   = [] -> null%0A      - max_session_duration  = 3600 -> null%0A      - name                  = "user-data-retrieve-role20250421112906614500000001" -> null%0A      - name_prefix           = "user-data-retrieve-role" -> null%0A      - path                  = "/" -> null%0A      - tags_all              = {} -> null%0A      - unique_id             = "AROA5YODGS4BELN4GYDAI" -> null%0A        # (2 unchanged attributes hidden)%0A    }%0A%0A  # module.lambda_retrieve.aws_iam_role_policy_attachment.lambda_policy_attachment will be destroyed%0A  # (because aws_iam_role_policy_attachment.lambda_policy_attachment is not in configuration)%0A  - resource "aws_iam_role_policy_attachment" "lambda_policy_attachment" {%0A      - id         = "user-data-retrieve-role20250421112906614500000001-20250421112907303600000006" -> null%0A      - policy_arn = "arn:aws:iam::945839052546:policy/user-data-retrieve-policy20250421112906732800000004" -> null%0A      - role       = "user-data-retrieve-role20250421112906614500000001" -> null%0A    }%0A%0APlan: 8 to add, 0 to change, 7 to destroy.%0A%0AChanges to Outputs:%0A  + aurora_endpoint                 = (known after apply)%0A  + aurora_reader_endpoint          = (known after apply)%0A  + database_credentials_secret_arn = (known after apply)%0A  + database_security_group_id      = (known after apply)%0A  - dynamodb_table_arn              = "arn:aws:dynamodb:us-east-1:945839052546:table/UserDataTable" -> null%0A%0A─────────────────────────────────────────────────────────────────────────────%0A%0ANote: You didn't use the -out option to save this plan, so Terraform can't%0Aguarantee to take exactly these actions if you run "terraform apply" now.%0A
::debug::stderr: 
::debug::exitcode: 0
